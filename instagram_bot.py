import os
import logging
import random
import requests
from flask import Flask
from threading import Thread
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import yt_dlp

# Telegram token
BOT_TOKEN = os.environ.get("BOT_TOKEN")

# Instagram cookies (–Ω–µ –º–µ–Ω—è–π, –µ—Å–ª–∏ –Ω–µ –∏—Å—Ç–µ–∫–ª–∏)
COOKIES_STRING = (
    "mid=Z-JcogALAAHBuU_jpo2DmCqHCKqB; "
    "datr=olziZyt4Xj82VkHmV3nmGF12; "
    "ig_did=A1F5CBE3-F0C5-4468-875E-E5415F9A1EE9; "
    "ig_nrcb=1; "
    "csrftoken=ONFysLggevyniNoB0MYrIJpBnyZ1JxFi; "
    "ds_user_id=48658772952; "
    "wd=1536x703; "
    "dpr=1.25; "
    "ps_l=1; "
    "ps_n=1; "
    "sessionid=48658772952%3AmOjL1NHJJqKhQD%3A1%3AAYfz_-8oerdCknZnwLAi6bfNLaLx0wTDTGVuzqlnBg; "
    "rur=\"CLN\\05448658772952\\0541781283030:01fe1e976d3a3b16d07ea873e605cd27a8228d699f815235f9aae8937a55ecf313e4fc70\""
)

logging.basicConfig(filename='bot_errors.log', level=logging.ERROR)

before_download = [
    "üì• –í—ã—Å–∞—Å—ã–≤–∞—é —Ç–≤–æ–π Reels, –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∫ –∏–∑ —Ç—Ä—É–±–æ—á–∫–∏...",
    "üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å –≤ MP4, –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –≥–µ–Ω–∏–π...",
    "‚åõ –ñ–¥–∏, –ø–æ–∫–∞ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º –≤—ã–¥–∞—Å—Ç –º–Ω–µ —Ç–≤–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ –±–æ–ª—å...",
    "üöÄ –ó–∞–ø—É—Å–∫–∞—é —Ä–∞–∫–µ—Ç—É, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–µ–µ —Å–∫–∞—á–∞—Ç—å..."
]

after_download = [
    "–í–æ—Ç —Ç–≤–æ–π –≤–∏–¥–æ—Å üòè",
    "–ò–Ω—Å—Ç–∞–≥—Ä–∞–º –¥—Ä–æ–∂–∏—Ç –æ—Ç —Ç–≤–æ–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤... –¥–µ—Ä–∂–∏ üëÄ",
    "–°–Ω–æ–≤–∞ Reels? –î–∞ —Ç—ã –≥—É—Ä—É —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞! üèÜ",
    "–õ–æ–≤–∏, –ø–æ–∫–∞ –∏–Ω—Å—Ç–∞ –Ω–µ –ø–µ—Ä–µ–¥—É–º–∞–ª–∞! üéÅ"
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –∏–∑ Instagram ‚Äî –∏ —è —Å–∫–∞—á–∞—é Reels –∏–ª–∏ –ø–æ—Å—Ç-–≤–∏–¥–µ–æ!",
        reply_markup=ReplyKeyboardMarkup([["/help"]], resize_keyboard=True)
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üì• –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ Reels –∏–∑ Instagram ‚Äî –∏ —è —Å–∫–∞—á–∞—é –µ–≥–æ –¥–ª—è —Ç–µ–±—è!"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message.text.strip()

    if "instagram.com" in message:
        await update.message.reply_text(random.choice(before_download))
        try:
            ydl_opts = {
                'outtmpl': 'insta_video.mp4',
                'format': 'mp4',
                'quiet': True,
                'noplaylist': True,
                'http_headers': {
                    'User-Agent': 'Mozilla/5.0',
                    'Accept-Language': 'en-US,en;q=0.9',
                    'Cookie': COOKIES_STRING
                }
            }

            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                ydl.download([message])

            if os.path.getsize("insta_video.mp4") > 50_000_000:
                os.remove("insta_video.mp4")
                await update.message.reply_text("‚ö†Ô∏è –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –¥–ª—è Telegram (>50MB).")
                return

            with open("insta_video.mp4", "rb") as f:
                await update.message.reply_video(f)

            os.remove("insta_video.mp4")
            await update.message.reply_text(random.choice(after_download))
        except Exception as e:
            logging.error(str(e))
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ. –ü—Ä–æ–≤–µ—Ä—å —Å—Å—ã–ª–∫—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
    else:
        await update.message.reply_text("‚ùó –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ Instagram-—Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")

# Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
flask_app = Flask(__name__)

@flask_app.route('/')
def home():
    return "‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω!"

def run_flask():
    flask_app.run(host="0.0.0.0", port=8000)

def run_bot():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()

if __name__ == '__main__':
    Thread(target=run_flask, daemon=True).start()
    run_bot()
