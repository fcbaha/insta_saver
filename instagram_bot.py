import os
import logging
import random
import requests
from flask import Flask
from threading import Thread
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import yt_dlp

BOT_TOKEN = os.environ.get("BOT_TOKEN")
OPENROUTER_API_KEY = os.environ.get("OPENROUTER_API_KEY")

COOKIES_STRING = "your_instagram_cookies_here"  # –≤—Å—Ç–∞–≤—å —Å–≤–æ–∏ cookies

logging.basicConfig(filename='bot_errors.log', level=logging.ERROR)

before_download = [
    "üì• –í—ã—Å–∞—Å—ã–≤–∞—é —Ç–≤–æ–π Reels, –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∫ –∏–∑ —Ç—Ä—É–±–æ—á–∫–∏...",
    "üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å –≤ –∫—Ä–∏–≤–æ–µ MP4, –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –≥–µ–Ω–∏–π...",
    "‚åõ –ñ–¥–∏, –ø–æ–∫–∞ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º –≤—ã–¥–∞—Å—Ç –º–Ω–µ —Ç–≤–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ –±–æ–ª—å...",
    "üî• –†–∞–∑–æ–≥—Ä–µ–≤–∞—é —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –≤–∏–¥–µ–æ...",
    "üé¨ –í–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø—Ä–µ–º—å–µ—Ä–Ω—ã–π –ø–æ–∫–∞–∑...",
    "‚ö° –£—Å–∫–æ—Ä—è—é –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∫—É–ª–∞–∫–∞–º–∏...",
    "üßô‚Äç‚ôÇÔ∏è –ö–æ–ª–¥—É—é –Ω–∞–¥ —Å—Å—ã–ª–∫–æ–π, –ø–æ—á—Ç–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å...",
    "üöÄ –ó–∞–ø—É—Å–∫–∞—é —Ä–∞–∫–µ—Ç—É, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–µ–µ —Å–∫–∞—á–∞—Ç—å..."
]

after_download = [
    "–í–æ—Ç —Ç–≤–æ–π –≤–∏–¥–æ—Å, –Ω–µ –±–ª–∞–≥–æ–¥–∞—Ä–∏... —Ö–æ—Ç—è –ª–∞–¥–Ω–æ, –±–ª–∞–≥–æ–¥–∞—Ä–∏ üòè",
"–ò–Ω—Å—Ç–∞–≥—Ä–∞–º –¥—Ä–æ–∂–∏—Ç –æ—Ç —Ç–≤–æ–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤... –¥–µ—Ä–∂–∏ üëÄ",
"–ï—â—ë –æ–¥–∏–Ω –∫–ª–∏–∫ ‚Äî –∏ —Ç—ã –≤ –º–æ–∏—Ö —Ä—É–∫–∞—Ö. –û–π, —Ç–æ –µ—Å—Ç—å –≤–æ—Ç –≤–∏–¥–µ–æ üòà",
"–¢—ã —Ç–æ—á–Ω–æ –Ω–µ –∞–≥–µ–Ω—Ç –§–ë–†? –õ–∞–¥–Ω–æ, –¥–µ—Ä–∂–∏, –Ω–æ —è —Å–ª–µ–∂—É –∑–∞ —Ç–æ–±–æ–π üëÅÔ∏è",
"–°–Ω–æ–≤–∞ Reels? –î–∞ —Ç—ã –≥—É—Ä—É —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞! üèÜ",
"–í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ! (–ê —Ç–µ–ø–µ—Ä—å –∏–¥–∏ —Ä–∞–±–æ—Ç–∞–π, –∞ –Ω–µ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö —Å–∏–¥–∏) üöÄ",
"–õ–æ–≤–∏ –≤–∏–¥–æ—Å, –ø–æ–∫–∞ –∏–Ω—Å—Ç–∞ –Ω–µ –ø–µ—Ä–µ–¥—É–º–∞–ª–∞! ÔøΩ",
"–¢—ã —á—Ç–æ, —Ä–µ—à–∏–ª —Å–∫–∞—á–∞—Ç—å –≤–µ—Å—å –∏–Ω—Å—Ç–∞–≥—Ä–∞–º? –ù—É –¥–µ—Ä–∂–∏... üòÖ",
"–û–ø–∞, –µ—â—ë –æ–¥–∏–Ω –∫–æ–Ω—Ç–µ–Ω—Ç-–≤–æ—Ä... —à—É—á—É, –ª–æ–≤–∏! üéÅ",
"–í–∏–¥–µ–æ –¥–æ–±—ã—Ç–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å —Ñ–ª–µ–∫—Å–∏—Ç—å –≤ —á–∞—Ç–∏–∫–∞—Ö üòé",
"–¢—ã —Ç–∞–∫ —á–∞—Å—Ç–æ –ø—Ä–æ—Å–∏—à—å, —á—Ç–æ —Å–∫–æ—Ä–æ —è –Ω–∞—á–Ω—É –±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É! üí∏",
"–ì–æ—Ç–æ–≤–æ! –ù–æ –µ—Å–ª–∏ —ç—Ç–æ –∫–æ—Ç–∏–∫–∏ ‚Äî —è —É–∂–µ –≤ –¥–æ–ª–µ üê±"
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –∏–∑ Instagram –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å!",
        reply_markup=ReplyKeyboardMarkup([["/help"]], resize_keyboard=True)
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üì• –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ Reels –∏–∑ Instagram, –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å ‚Äî —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å ‚ú®"
    )

async def ask_openrouter(prompt: str) -> str:
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": "openchat/openchat-7b:free",
        "messages": [
            {"role": "system", "content": "–¢—ã —É–º–Ω—ã–π Telegram-–±–æ—Ç, –æ—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ."},
            {"role": "user", "content": prompt}
        ]
    }

    try:
        response = requests.post("https://openrouter.ai/api/v1/chat/completions", headers=headers, json=payload, timeout=30)
        response.raise_for_status()
        return response.json()['choices'][0]['message']['content'].strip()
    except Exception as e:
        logging.error(f"OpenRouter API error: {str(e)}")
        return "‚ùå –Ø –Ω–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message.text.strip()

    if "instagram.com" in message:
        await update.message.reply_text(random.choice(before_download))
        try:
            ydl_opts = {
                'outtmpl': 'insta_video.mp4',
                'format': 'mp4',
                'quiet': True,
                'noplaylist': True,
                'http_headers': {
                    'User-Agent': 'Mozilla/5.0',
                    'Accept-Language': 'en-US,en;q=0.9',
                    'Cookie': COOKIES_STRING
                }
            }

            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                ydl.download([message])

            if os.path.getsize("insta_video.mp4") > 50_000_000:
                os.remove("insta_video.mp4")
                await update.message.reply_text("‚ö†Ô∏è –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –¥–ª—è Telegram (>50MB).")
                return

            with open("insta_video.mp4", "rb") as f:
                await update.message.reply_video(f)

            os.remove("insta_video.mp4")
            await update.message.reply_text(random.choice(after_download))
        except Exception as e:
            logging.error(str(e))
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ. –ü—Ä–æ–≤–µ—Ä—å —Å—Å—ã–ª–∫—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
    else:
        reply = await ask_openrouter(message)
        await update.message.reply_text(reply)

# Flask –¥–ª—è Render
flask_app = Flask(__name__)

@flask_app.route('/')
def home():
    return "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

def run_flask():
    flask_app.run(host="0.0.0.0", port=8000)

def run_bot():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()

if __name__ == '__main__':
    Thread(target=run_flask, daemon=True).start()
    run_bot()
